--Create categories table
CREATE TABLE categories (
    id   VARCHAR2(25) NOT NULL
        CONSTRAINT pk_ctgr PRIMARY KEY,
    name VARCHAR2(255) NOT NULL
);

--Create sub-categories table
CREATE TABLE sub_categories (
    id   VARCHAR2(25) NOT NULL
        CONSTRAINT pk_subctgr PRIMARY KEY,
    name VARCHAR2(255) NOT NULL
);

--Create bridge table between categories table and sub-categories table
CREATE TABLE categories_subcategories (
    id             NUMBER
        GENERATED BY DEFAULT ON NULL AS IDENTITY,
    category_id    VARCHAR2(25) NOT NULL,
    subcategory_id VARCHAR2(25) NOT NULL,
    CONSTRAINT fk_ctgr_id FOREIGN KEY ( category_id )
        REFERENCES categories ( id ),
    CONSTRAINT fk_subctgr_id FOREIGN KEY ( subcategory_id )
        REFERENCES sub_categories ( id )
);

--Create products table
CREATE TABLE products (
    sku          INT PRIMARY KEY,
    name         VARCHAR(255),
    type         VARCHAR(255),
    price        DECIMAL(10, 2),
    upc          VARCHAR2(50),
    shipping     DECIMAL(10, 2),
    description  VARCHAR2(500),
    manufacturer VARCHAR2(100),
    model        VARCHAR2(50),
    url          VARCHAR2(255),
    image        VARCHAR2(255)
);

--Create bridge table between categories and products
CREATE TABLE products_categories (
    id          NUMBER
        GENERATED BY DEFAULT ON NULL AS IDENTITY,
    product_sku INT NOT NULL,
    category_id VARCHAR2(25) NOT NULL,
    CONSTRAINT fk_prod_sku FOREIGN KEY ( product_sku )
        REFERENCES products ( sku ),
    CONSTRAINT fk_prod_ctgr_id FOREIGN KEY ( category_id )
        REFERENCES categories ( id )
);

--Create stores table
CREATE TABLE stores (
    id           NUMBER NOT NULL PRIMARY KEY,
    type         VARCHAR(50) NOT NULL,
    name         VARCHAR(100) NOT NULL,
    address      VARCHAR(100) NOT NULL,
    address2     VARCHAR(100) DEFAULT NULL,
    city         VARCHAR(50) NOT NULL,
    state        VARCHAR(50) DEFAULT NULL,
    zip          VARCHAR(15) DEFAULT NULL,
    location_lat DECIMAL(9,6) NOT NULL,
    location_lon DECIMAL(9,6) NOT NULL,
    hours        VARCHAR2(225) NOT NULL
    );

--Create stores_service table 
CREATE TABLE stores_services (
    id           NUMBER
        GENERATED BY DEFAULT ON NULL AS IDENTITY,
    store_id     NUMBER NOT NULL,
    service_name VARCHAR2(100) NOT NULL,
    CONSTRAINT store_service_fk FOREIGN KEY ( store_id )
        REFERENCES stores ( id )
);

-- Create table for logging errors
CREATE TABLE error_log (
    id            NUMBER
        GENERATED BY DEFAULT ON NULL AS IDENTITY,
    e_user        VARCHAR2(255) NOT NULL,
    e_date        DATE,
    error_code    NUMBER,
    error_message VARCHAR2(255)
);

--Procedure for logging errors
CREATE OR REPLACE PROCEDURE create_error_log (
    p_error_code    error_log.error_code%TYPE,
    p_error_message error_log.error_message%TYPE
) IS
BEGIN
    INSERT INTO error_log (
        e_user,
        e_date,
        error_code,
        error_message
    ) VALUES (
        user,
        sysdate,
        p_error_code,
        p_error_message
    );

EXCEPTION
    WHEN OTHERS THEN
        NULL;
END create_error_log;
/
--Function for checking if a category already exists.
CREATE OR REPLACE FUNCTION category_exists (
    p_id categories.id%TYPE
) RETURN BOOLEAN IS
    v_result categories.id%TYPE;
BEGIN
    SELECT
        id
    INTO v_result
    FROM
        categories
    WHERE
        id = p_id;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END category_exists;
/
--Procedure for storing new category in the database
CREATE OR REPLACE PROCEDURE create_category (
    p_id     categories.id%TYPE,
    p_name   categories.name%TYPE,
    o_result OUT NUMBER
) IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
BEGIN
    IF ( category_exists(p_id) ) THEN
        o_result := 0;
    ELSE
        INSERT INTO categories (
            id,
            name
        ) VALUES (
            p_id,
            p_name
        );

        COMMIT;
        o_result := 1;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_category;
/
--Function for checking if a sub_category already exists.
CREATE OR REPLACE FUNCTION sub_category_exists (
    p_id sub_categories.id%TYPE
) RETURN BOOLEAN IS
    v_result sub_categories.id%TYPE;
BEGIN
    SELECT
        id
    INTO v_result
    FROM
        sub_categories
    WHERE
        id = p_id;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END sub_category_exists;
/
-- Funciton for checking if relationship between category and subcategory.
CREATE OR REPLACE FUNCTION category_subcategory_rel_exists (
    p_category_id    categories.id%TYPE,
    p_subcategory_id sub_categories.id%TYPE
) RETURN BOOLEAN IS
    v_category_id    categories.id%TYPE;
    v_subcategory_id sub_categories.id%TYPE;
BEGIN
    SELECT
        category_id,
        subcategory_id
    INTO
        v_category_id,
        v_subcategory_id
    FROM
        categories_subcategories
    WHERE
            category_id = p_category_id
        AND subcategory_id = p_subcategory_id;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END;
/
--Procedure for storing new sub-category in the database
CREATE OR REPLACE PROCEDURE create_sub_category (
    p_category_id categories.id%TYPE, -- Id of the category the subcategory belongs to
    p_id          sub_categories.id%TYPE,
    p_name        sub_categories.name%TYPE,
    o_result      OUT NUMBER
) IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
BEGIN
    IF sub_category_exists(p_id) THEN
        IF NOT category_subcategory_rel_exists(p_category_id, p_id) THEN
            INSERT INTO categories_subcategories (
                category_id,
                subcategory_id
            ) VALUES (
                p_category_id,
                p_id
            );

            COMMIT;
            o_result := 1;
        ELSE
            o_result := 0;
        END IF;

    ELSE
        INSERT INTO sub_categories (
            id,
            name
        ) VALUES (
            p_id,
            p_name
        );

        INSERT INTO categories_subcategories (
            category_id,
            subcategory_id
        ) VALUES (
            p_category_id,
            p_id
        );

        COMMIT;
        o_result := 2;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_sub_category;
/
--Function for checking if a category already exists.
CREATE OR REPLACE FUNCTION product_exists (
    p_sku products.sku%TYPE
) RETURN BOOLEAN IS
    v_result products.sku%TYPE;
BEGIN
    SELECT
        sku
    INTO v_result
    FROM
        products
    WHERE
        sku = p_sku;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END product_exists;
/
--Procedure for storing new product in the database
CREATE OR REPLACE PROCEDURE create_product (
    p_sku          products.sku%TYPE,
    p_name         products.name%TYPE,
    p_type         products.type%TYPE,
    p_price        products.type%TYPE,
    p_upc          products.upc%TYPE,
    p_shipping     products.shipping%TYPE,
    p_description  products.description%TYPE,
    p_manufacturer products.manufacturer%TYPE,
    p_model        products.model%TYPE,
    p_url          products.url%TYPE,
    p_image        products.image%TYPE,
    o_result       OUT NUMBER
) IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
BEGIN
    IF ( product_exists(p_sku) ) THEN
        o_result := 0;
    ELSE
        INSERT INTO products (
            sku,
            name,
            type,
            price,
            upc,
            shipping,
            description,
            manufacturer,
            model,
            url,
            image
        ) VALUES (
            p_sku,
            p_name,
            p_type,
            p_price,
            p_upc,
            p_shipping,
            p_description,
            p_manufacturer,
            p_model,
            p_url,
            p_image
        );

        COMMIT;
        o_result := 1;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_product;
/
-- Funciton for checking if relationship between product and category.
CREATE OR REPLACE FUNCTION product_category_rel_exists (
    p_product_sku products.sku%TYPE,
    p_category_id categories.id%TYPE
) RETURN BOOLEAN IS
    v_product_sku products.sku%TYPE;
    v_category_id categories.id%TYPE;
BEGIN
    SELECT
        product_sku,
        category_id
    INTO
        v_product_sku,
        v_category_id
    FROM
        products_categories
    WHERE
            category_id = p_category_id
        AND product_sku = p_product_sku;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END product_category_rel_exists;
/
-- Procedure to establish link between products and categories
CREATE OR REPLACE PROCEDURE create_product_category_rel (
    p_sku           products.sku%TYPE,
    p_category_id   categories.id%TYPE,
    p_category_name categories.name%TYPE,
    o_result        OUT NUMBER
) IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
    v_counter     NUMBER := 0; -- Count operations
BEGIN
    IF NOT product_exists(p_sku) THEN
        raise_application_error(-20201, 'No product is associated with sku ' || p_sku);
    ELSIF NOT category_exists(p_category_id) THEN -- Create category if not exists
        INSERT INTO categories (
            id,
            name
        ) VALUES (
            p_category_id,
            p_category_name
        );

        COMMIT;
        v_counter := v_counter + 1;
    END IF;

    IF NOT product_category_rel_exists(p_sku, p_category_id) THEN
        INSERT INTO products_categories (
            product_sku,
            category_id
        ) VALUES (
            p_sku,
            p_category_id
        );

        COMMIT;
        v_counter := v_counter + 1;
    END IF;

    o_result := v_counter;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_product_category_rel;
/

--Function for checking if a store already exists.
CREATE OR REPLACE FUNCTION store_exists (
    p_id stores.id%TYPE
) RETURN BOOLEAN IS
    v_result stores.id%TYPE;
BEGIN
    SELECT
        id
    INTO v_result
    FROM
        stores
    WHERE
        id = p_id;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END store_exists;
/

--Procedure for storing new store in the database
CREATE OR REPLACE PROCEDURE create_store (
p_id stores.id%TYPE,
  p_type stores.type%TYPE,
    p_name stores.name%TYPE,
    p_address stores.address%TYPE,
    p_address2 stores.address2%TYPE,
    p_city stores.city%TYPE,
    p_state stores.state%TYPE,
    p_zip stores.zip%TYPE,
    p_location_lat stores.location_lat%TYPE,
    p_location_lon stores.location_lon%TYPE,
    p_hours stores.hours%TYPE,
        o_result OUT NUMBER
        )IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
BEGIN
    IF ( store_exists(p_id) ) THEN
        o_result := 0;
    ELSE
        INSERT INTO stores (
    id,
    type,
    name,
    address,
    address2,
    city,
    state,
    zip,
    location_lat,
    location_lon,
    hours
) VALUES (
p_id ,
  p_type,
    p_name ,
    p_address ,
    p_address2 ,
    p_city ,
    p_state,
    p_zip,
    p_location_lat ,
    p_location_lon ,
    p_hours
);
        COMMIT;
        o_result := 1;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_store;
/

-- Function for checking if relationship between store and service.
CREATE OR REPLACE FUNCTION store_service_rel_exists (
    p_store_id     stores.id%TYPE,
    p_service_name stores_services.service_name%TYPE
) RETURN BOOLEAN IS
    v_store_id stores.id%TYPE;
BEGIN
    SELECT
        store_id
    INTO v_store_id
    FROM
        stores_services
    WHERE
            store_id = p_store_id
        AND service_name = p_service_name;

    RETURN true;
EXCEPTION
    WHEN no_data_found THEN
        RETURN false;
END store_service_rel_exists;
/

--Procedure for linking stores to services in the database
CREATE OR REPLACE PROCEDURE create_store_service (
    p_store_id     stores.id%TYPE,
    p_service_name stores_services.service_name%TYPE,
    o_result       OUT NUMBER
) IS
    error_code    NUMBER;
    error_message VARCHAR2(255);
BEGIN
    IF store_service_rel_exists(p_store_id, p_service_name) THEN
        o_result := 0;
    ELSE
        INSERT INTO stores_services (
            store_id,
            service_name
        ) VALUES (
            p_store_id,
            p_service_name
        );

        COMMIT;
        o_result := 1;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        o_result := -1;
        error_code := sqlcode;
        error_message := sqlerrm;
        create_error_log(error_code, error_message);
END create_store_service;
/
